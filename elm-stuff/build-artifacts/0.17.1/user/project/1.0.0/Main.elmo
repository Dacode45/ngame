var _user$project$Main$view = function (game) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_elm_lang$core$List$map,
					_elm_lang$html$Html$text,
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, game.objs))),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(game.player))
					])),
				_elm_lang$html$Html$text('Hello, World!')
			]));
};
var _user$project$Main$setForce = F3(
	function (name, force, obj) {
		return _elm_lang$core$Native_Utils.update(
			obj,
			{
				forces: A3(_elm_lang$core$Dict$insert, name, force, obj.forces)
			});
	});
var _user$project$Main$gravity = {x: 0, y: -10};
var _user$project$Main$defaultPhysics = function (gTag) {
	var _p0 = gTag;
	if (_p0 === 'player') {
		return _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'gravity', _1: _user$project$Main$gravity}
				]));
	} else {
		return _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[]));
	}
};
var _user$project$Main$updateVector = F3(
	function (dt, v1, v2) {
		return _elm_lang$core$Native_Utils.update(
			v1,
			{x: v1.x + (v2.x * dt), y: v2.y + (v2.y * dt)});
	});
var _user$project$Main$applyPhysics = F2(
	function (dt, obj) {
		return obj.$static ? obj : _elm_lang$core$Native_Utils.update(
			obj,
			{
				position: A3(_user$project$Main$updateVector, dt, obj.position, obj.velocity),
				velocity: A3(
					_elm_lang$core$List$foldr,
					_user$project$Main$updateVector(dt),
					obj.velocity,
					_elm_lang$core$Dict$values(obj.forces)),
				forces: _user$project$Main$defaultPhysics(obj.gTag)
			});
	});
var _user$project$Main$addVector = F2(
	function (v1, v2) {
		return _elm_lang$core$Native_Utils.update(
			v1,
			{x: v1.x + v2.x, y: v1.y + v2.y});
	});
var _user$project$Main$Vector = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$ninja = {
	position: A2(_user$project$Main$Vector, 0, 0),
	velocity: A2(_user$project$Main$Vector, 0, 0),
	forces: _user$project$Main$defaultPhysics('player'),
	isFloating: true,
	$static: false,
	gTag: 'player'
};
var _user$project$Main$game = {
	objs: _elm_lang$core$Native_List.fromArray(
		[]),
	player: _user$project$Main$ninja
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$game, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$keyDown = F2(
	function (keyCode, game) {
		var one = A2(_elm_lang$core$Debug$log, 'one', keyCode);
		var player = game.player;
		var _p1 = _user$project$Key$fromCode(keyCode);
		if (_p1.ctor === 'Space') {
			return _elm_lang$core$Native_Utils.update(
				game,
				{
					player: A3(
						_user$project$Main$setForce,
						'jump',
						A2(_user$project$Main$Vector, 0, 10),
						player)
				});
		} else {
			return game;
		}
	});
var _user$project$Main$update = F2(
	function (msg, game) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'TimeUpdate':
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						game,
						{
							objs: A2(
								_elm_lang$core$List$map,
								_user$project$Main$applyPhysics(_p3),
								game.objs),
							player: A2(_user$project$Main$applyPhysics, _p3, game.player)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'KeyDown':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Main$keyDown, _p2._0, game),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$GObject = F6(
	function (a, b, c, d, e, f) {
		return {position: a, velocity: b, forces: c, isFloating: d, $static: e, gTag: f};
	});
var _user$project$Main$Player = function (a) {
	return {obj: a};
};
var _user$project$Main$Game = F2(
	function (a, b) {
		return {objs: a, player: b};
	});
var _user$project$Main$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$TimeUpdate = function (a) {
	return {ctor: 'TimeUpdate', _0: a};
};
var _user$project$Main$subscriptions = function (obj) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Main$TimeUpdate),
				_elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
				_elm_lang$keyboard$Keyboard$ups(_user$project$Main$KeyUp)
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
